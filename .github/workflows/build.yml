name: Test and build apps

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    tags:
      - "v*.*.*"
  pull_request:

jobs:
  buildWebApp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
          cache-dependency-path: web/yarn.lock

      - name: Build web app
        run: cd web && yarn install && yarn build

      - name: Upload web app
        uses: actions/upload-artifact@v3
        with:
          name: web-app
          path: web/build/*

  test:
    runs-on: ubuntu-latest
    needs: buildWebApp
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up rust
        run: rustup toolchain install stable --profile minimal

      - name: Rust caching
        uses: Swatinem/rust-cache@v2
        with:
          key: test

      - name: Download web app
        uses: actions/download-artifact@v3
        with:
          name: web-app
          path: web/build

      - name: Run test
        run: cargo test

  buildLinuxApps:
    runs-on: ubuntu-latest
    needs: buildWebApp
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - mipsel-unknown-linux-musl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up rust
        run: rustup toolchain install stable --profile minimal

      - name: Rust caching
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Download web app
        uses: actions/download-artifact@v3
        with:
          name: web-app
          path: web/build

      - name: Build Linux app
        run: cargo install cross && cross build --bin cpxy --release --target=${{ matrix.target }}

      - name: Upload Linux app
        uses: actions/upload-artifact@v3
        with:
          name: linux-app-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/cpxy

      - name: Determine docker arch
        id: docker_arch_meta
        if: github.event_name != 'pull_request'
        run: echo "::set-output name=TARGETARCH::`scripts/rust-target-to-docker.sh ${{ matrix.target }}`"
      - name: Docker meta
        if: steps.docker_arch_meta.outputs.TARGETARCH != '' && github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/simophin/cpxy
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Set up QEMU
        if: steps.docker_arch_meta.outputs.TARGETARCH != '' && github.event_name != 'pull_request'
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        if: steps.docker_arch_meta.outputs.TARGETARCH != '' && github.event_name != 'pull_request'
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR
        if: steps.docker_arch_meta.outputs.TARGETARCH != '' && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Rename artifact for docker build
        if: steps.docker_arch_meta.outputs.TARGETARCH != '' && github.event_name != 'pull_request'
        run: cp -v target/${{ matrix.target }}/release/cpxy ./
      - name: Build and push
        if: steps.docker_arch_meta.outputs.TARGETARCH != '' && github.event_name != 'pull_request'
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/${{ steps.docker_arch_meta.outputs.TARGETARCH }}
          file: Dockerfile.cp
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          build-args: |
            APP_SRC=cpxy

  buildAndroidLibs:
    runs-on: ubuntu-latest
    needs: buildWebApp
    strategy:
      matrix:
        target:
          - armv7-linux-androideabi
          - aarch64-linux-android
          - i686-linux-android
          - x86_64-linux-android
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up rust
        run: rustup toolchain install stable --profile minimal

      - name: Rust caching
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Download web app
        uses: actions/download-artifact@v3
        with:
          name: web-app
          path: web/build

      - name: Build Android lib
        run: cargo install cross && cross build --release --lib --target=${{ matrix.target }}

      - name: Upload Android lib
        uses: actions/upload-artifact@v3
        with:
          name: android-lib-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/libcpxy.so

  buildAndroidApp:
    runs-on: ubuntu-latest
    needs: buildAndroidLibs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin" # See 'Supported distributions' for available options
          java-version: "17"
          cache: "gradle"

      - name: Download web app
        uses: actions/download-artifact@v3
        with:
          name: web-app
          path: web/build

      - name: Download armv7 lib
        uses: actions/download-artifact@v3
        with:
          name: android-lib-armv7-linux-androideabi
          path: android/app/src/main/jniLibs/armeabi-v7a

      - name: Download arm64 lib
        uses: actions/download-artifact@v3
        with:
          name: android-lib-aarch64-linux-android
          path: android/app/src/main/jniLibs/arm64-v8a

      - name: Download i686 lib
        uses: actions/download-artifact@v3
        with:
          name: android-lib-i686-linux-android
          path: android/app/src/main/jniLibs/x86

      - name: Download x86_64 lib
        uses: actions/download-artifact@v3
        with:
          name: android-lib-x86_64-linux-android
          path: android/app/src/main/jniLibs/x86_64

      # Build Android app
      - name: Build Android app
        run: cd android && ./gradlew assembleRelease

      - name: Upload Android app
        uses: actions/upload-artifact@v3
        with:
          name: android-app
          path: android/app/build/outputs/apk/release/app-release.apk

  buildPlatformNativeApps:
    runs-on: ${{ matrix.os }}-latest
    needs: buildWebApp
    strategy:
      matrix:
        os:
          - windows
          - macos
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up rust
        run: rustup toolchain install stable --profile minimal

      - name: Rust caching
        uses: Swatinem/rust-cache@v2

      - name: Download web app
        uses: actions/download-artifact@v3
        with:
          name: web-app
          path: web/build

      - name: Build ${{ matrix.os }} app
        run: cargo build --bin cpxy --release

      - name: Upload ${{ matrix.os }} app
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-app
          path: target/release/cpxy*

  archiveAndRelease:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - buildLinuxApps
      - buildAndroidApp
      - buildPlatformNativeApps
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Archive Linux artifacts
        run: |
          for i in linux-app-*; do
            tar zcfv $i.tar.gz $i/cpxy
          done
      - name: Archive Windows artifacts
        run: zip -r windows-app.zip windows-app/cpxy.exe
      - name: Archive Mac artifacts
        run: zip -r macos-app.zip macos-app/cpxy
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            linux-app-*.tar.gz
            windows-app.zip
            macos-app.zip
            app-release.apk
