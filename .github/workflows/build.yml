name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*.*.*'
  pull_request:

jobs:
  buildWebApp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn'
          cache-dependency-path: web/yarn.lock

      - name: Build web app
        run: cd web && yarn install && yarn build

      - name: Upload web app
        uses: actions/upload-artifact@v3
        with:
          name: web_app
          path: web/build/*

  test:
    runs-on: ubuntu-latest
    needs: buildWebApp
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Download web app
        uses: actions/download-artifact@v3
        with:
          name: web_app
          path: web/build

      - name: Run test
        run: cargo test

  buildLinuxApps:
    runs-on: ubuntu-latest
    needs: buildWebApp
    strategy:
      matrix:
        target: 
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - mipsel-unknown-linux-musl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up cross
        uses: actions-rs/install@v0.1
        with:
          crate: cross
          version: latest
          use-tool-cache: true

      - name: Download web app
        uses: actions/download-artifact@v3
        with:
          name: web_app
          path: web/build

      - name: Build Linux app
        run: cross build --release --target=${{ matrix.target }}

      - name: Rename artifact
        run: target/${{ matrix.target }}/release/cpxy cpxy.${{ matrix.target }}

      - name: Upload Linux app
        uses: actions/upload-artifact@v3
        with:
          name: app-${{ matrix.target }}
          path: cpxy.${{ matrix.target }}

  buildAndroidLibs:
    runs-on: ubuntu-latest
    needs: buildWebApp
    strategy:
      matrix:
        target: [armv7, aarch64, i686, x86_64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up cross
        uses: actions-rs/install@v0.1
        with:
          crate: cross
          version: latest
          use-tool-cache: true

      - name: Download web app
        uses: actions/download-artifact@v3
        with:
          name: web_app
          path: web/build

      - name: Build Android lib
        run: cross build --release --lib --target=${{ matrix.target }}-linux-androideabi

      - name: Upload Android lib
        uses: actions/upload-artifact@v3
        with:
          name: android-lib-${{ matrix.target }}
          path: target/${{ matrix.target }}-linux-androideabi/release/libcpxy.so

  buildAndroidApp:
    runs-on: ubuntu-latest
    needs: buildAndroidLibs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'

      - name: Download web app
        uses: actions/download-artifact@v3
        with:
          name: web_app
          path: web/build

      - name: Download armv7 lib
        uses: actions/download-artifact@v3
        with:
          name: armv7
          path: android/app/src/main/jniLibs/armeabi-v7a

      - name: Download arm64 lib
        uses: actions/download-artifact@v3
        with:
          name: aarch64
          path: android/app/src/main/jniLibs/arm64-v8a
      
      - name: Download i686 lib
        uses: actions/download-artifact@v3
        with:
          name: i686
          path: android/app/src/main/jniLibs/x86

      - name: Download x86_64 lib
        uses: actions/download-artifact@v3
        with:
          name: x86_64
          path: android/app/src/main/jniLibs/x86_64

      # Build Android app
      - name: Build Android app
        run: cd android && ./gradlew assembleRelease

      - name: Upload Android app
        uses: actions/upload-artifact@v3
        with:
          name: android_app
          path: android/app/build/outputs/apk/release/app-release.apk

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - buildLinuxApps
      - buildAndroidApp
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            cpxy.*
            app-release.apk

  dockerPublish:
    runs-on: ubuntu-latest
    needs: buildLinuxApps
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/cpxy
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: Dockerfile.cp
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}