name: Build and release

on:
  push:
    branches: [ master ]
    tags:
      - "v*"
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/master')
    steps:
    - uses: actions/checkout@v2
    - name: Cache
      uses: actions/cache@v2.1.7
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: target
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable
    - name: Run tests
      run: cargo test
  build_linux:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v2
    - name: Cache
      uses: actions/cache@v2.1.7
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: target
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable
    - name: Build x86_64
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target=x86_64-unknown-linux-gnu
    - name: Build aarch64
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target=aarch64-unknown-linux-gnu
        use-cross: true
    - name: Build armv7
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target=armv7-unknown-linux-gnueabihf
        use-cross: true
    - name: Build MIPS
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target=mips-unknown-linux-musl
        use-cross: true
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: linux_artifact
        path: target/**/release/proxy
  build_windows:
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v2
    - name: Cache
      uses: actions/cache@v2.1.7
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: target
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable
    - name: Build x86_64
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target=x86_64-pc-windows-msvc
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: windows_artifacts
        path: target/**/release/proxy.exe
  build_apple:
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2.1.7
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: target
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
      - name: Build x86_64
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=x86_64-apple-darwin
#      - name: Set up toolchain
#        run: rustup target add aarch64-apple-darwin
#      - name: Build aarch64
#        uses: actions-rs/cargo@v1
#        with:
#          command: build
#          args: --release --target=aarch64-apple-darwin
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: apple_artifacts
          path: target/**/release/proxy

  build_android:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
      - name: Install cross
        run: cargo install cross
      - name: Build native libs
        run: ./build_android_libs.sh
      - name: Build with Gradle
        working-directory: ./android
        run: ./gradlew app:assembleDebug
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: android_artifact
          path: android/app/build/outputs/apk/debug/app-debug.apk
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build_linux, build_apple, build_windows, build_android]
    steps:
    - name: Download apple artifacts
      uses: actions/download-artifact@v2
      with:
        name: apple_artifacts
    - name: Download linux artifacts
      uses: actions/download-artifact@v2
      with:
        name: linux_artifact
    - name: Download windows artifacts
      uses: actions/download-artifact@v2
      with:
        name: windows_artifacts
    - name: Download android artifacts
      uses: actions/download-artifact@v2
      with:
        name: android_artifact
    - name: Rename artifacts
      run: |
        mv x86_64-apple-darwin/release/proxy proxy.darwin.x86_64 
        mv x86_64-unknown-linux-gnu/release/proxy proxy.linux.x86_64
        mv aarch64-unknown-linux-gnu/release/proxy proxy.linux.aarch64
        mv armv7-unknown-linux-gnueabihf/release/proxy proxy.linux.armv7
        mv mips-unknown-linux-musl/release/proxy proxy.linux.mips
        mv x86_64-pc-windows-msvc/release/proxy.exe proxy.win64.exe
    - name: Create github release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./proxy.*
          ./*.apk