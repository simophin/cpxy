name: Build and release

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/heads/master')
    steps:
    - uses: actions/checkout@v2
    - name: Cache
      uses: actions/cache@v2.1.7
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: target
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Run tests
      run: cargo test
  build_linux:
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v2
    - name: Cache
      uses: actions/cache@v2.1.7
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: target
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Build web app
      working-directory: app/web
      env:
        CI: false
      run: yarn install && yarn build
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Build packages
      run: >
        ./build_unix.sh \
          x86_64-unknown-linux-gnu \
          aarch64-unknown-linux-gnu \
          armv7-unknown-linux-gnueabihf \
          mips-unknown-linux-musl 
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: linux_artifact
        path: target/**/release/proxy
#  build_windows:
#    runs-on: windows-latest
#    if: startsWith(github.ref, 'refs/tags/')
#    steps:
#    - uses: actions/checkout@v2
#    - name: Cache
#      uses: actions/cache@v2.1.7
#      with:
#        # A list of files, directories, and wildcard patterns to cache and restore
#        path: target
#        # An explicit key for restoring and saving the cache
#        key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
#    - name: rust-toolchain
#      uses: actions-rs/toolchain@v1
#      with:
#        toolchain: stable
#    - name: Set stable
#      run: rustup override set nightly
#    - name: Build x86_64
#      uses: actions-rs/cargo@v1
#      with:
#        command: build
#        args: --release --target=x86_64-pc-windows-msvc
#    - name: Upload Artifact
#      uses: actions/upload-artifact@v2
#      with:
#        name: windows_artifacts
#        path: target/**/release/proxy.exe
#  build_apple:
#    runs-on: macos-latest
#    if: startsWith(github.ref, 'refs/tags/')
#    steps:
#      - uses: actions/checkout@v2
#      - name: Cache
#        uses: actions/cache@v2.1.7
#        with:
#          # A list of files, directories, and wildcard patterns to cache and restore
#          path: target
#          # An explicit key for restoring and saving the cache
#          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
#      - name: rust-toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#      - name: Build packages
#        run: ./build_unix.sh x86_64-apple-darwin
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: apple_artifacts
#          path: target/**/release/proxy

  build_android:
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      - name: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Build web app
        working-directory: app/web
        env:
          CI: false
        run: yarn install && yarn build
      - name: Build native libs
        run: ./build_android_libs.sh
      - name: Build with Gradle
        working-directory: app/android
        run: ./gradlew app:assembleDebug
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: android_artifact
          path: app/android/app/build/outputs/apk/debug/app-debug.apk